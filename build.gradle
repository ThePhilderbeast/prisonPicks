import de.undercouch.gradle.tasks.download.Download

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'com.github.rodionmoiseev.gradle.plugins', name: 'idea-utils', version: '0.2'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "de.undercouch.download" version "5.3.0"
}

apply plugin:"java"
apply plugin:"jacoco"

group = project.property("group")
version = project.property("version")
sourceCompatibility = project.property("sourceversion")

repositories
{
    jcenter()
    maven { 
        name = "GitHubPackages"
        url('https://maven.pkg.github.com/ThePhilderbeast/AutoPickup') 
        credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
    }
    maven { url('https://oss.sonatype.org/content/groups/public/') }
    maven { url('https://hub.spigotmc.org/nexus/content/repositories/snapshots/') }
    maven { url('https://maven.sk89q.com/repo/') }
}

processResources
{
    eachFile
    {
        copyDetails-> if (copyDetails.path == 'plugin.yml')
        {
            filter
            {
                line -> line.replace('{{version}}', project.property("version"));
            }
        }
    }
}

jacocoTestReport
{
    reports
    {
        xml.enabled = true
        xml.destination = new File("${buildDir}/reports/jacoco/", "report.xml")
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

dependencies
{

    compileOnly group:"org.spigotmc",
            name:"spigot-api",
            version:"1.11.2-R0.1-SNAPSHOT"

    compileOnly group:"com.sk89q.worldguard",
            name:"worldguard-legacy",
            version:"6.2"

    compileOnly group:"com.philderbeast.autopickup",
            name:"AutoPickup",
            version:"5.3.1"

    compileOnly group:"com.sk89q.worldedit",
            name:"worldedit-core",
            version:"6.1.4-SNAPSHOT"

    //testing dependencies
    testImplementation group:"junit",
            name:"junit",
            version:"4.13"

    testImplementation group:"org.powermock",
            name:"powermock-module-junit4",
            version:"2.0.7"

    testImplementation group:"org.powermock",
            name:"powermock-api-mockito2",
            version:"2.0.7"

}

shadowJar {
    dependencies {
        exclude( dependency('org.spigotmc:spigot-api:.*') )
        exclude( dependency('org.spigotmc:spigot:.*') )
    }

    eachFile
    {
        copyDetails-> if (copyDetails.path == 'plugin.yml')
        {
            filter
            {
                line -> line.replace('{{version}}', project.property("version"));
            }
        }
    }
}

task deploy(type: Copy, dependsOn: ['build']) {
    from "${buildDir}/libs"
    into "final/"
}

task setupDevServer(dependsOn: 'extractServerJar', type: Copy) {
    from 'config/serverfiles'
    into 'testserver'
}

task copyPluginToTestserver(dependsOn: ['build', 'shadowJar'], type: Copy) {
    from "${buildDir}/libs"
    include "*-all.jar"
    into "testserver/plugins"
}

task prepareDevServer(dependsOn: ['buildSpigot', 'setupDevServer', 'copyPluginToTestserver']) {}

task startDevServer(dependsOn: [prepareDevServer], type: JavaExec) {
    classpath configurations.implementation
    main = "-jar"
    args "server.jar"
    workingDir = "testserver/"
    standardInput = System.in
}

// START Building Spigot and Bukkit
def spigotBuildDir = new File("$buildDir/spigot/")

task extractServerJar(type: Copy) {
    from spigotBuildDir
    into "testserver/"

    include "spigot-" + project.property("apibuildtoolversion") + ".jar"

    rename  "spigot-" + project.property("apibuildtoolversion") + ".jar", "server.jar"
}

task setupWorkspace(dependsOn: ['buildSpigot']) {
}

task buildSpigot(type: Exec) {

    if (hasSpigotJar()) {
        enabled = false
        dependsOn = []
    } else {
        dependsOn = ['downloadBuildTool']
    }

    // Determine the current OS.
    def os_name = System.getProperty("os.name").toLowerCase()
    def os_windows = os_name.contains("windows")
    def os_linux = os_name.contains("linux")

    workingDir = spigotBuildDir

    if (os_windows)
    {
        executable = 'C:\\Program Files\\Git\\bin\\bash.exe'
    }else if(os_linux)
    {
        executable = 'bash'
    }

    args = ['-c', 'java -jar ./BuildTools.jar --rev ' + project.property("apibuildtoolversion") ]
}

task downloadBuildTool(type: Download) {
    spigotBuildDir.mkdirs()
    src project.property("buildtoolurl")
    dest new File(spigotBuildDir, "BuildTools.jar")
}

def hasSpigotJar() {
    def file = new File("$buildDir/spigot/spigot-" + project.property("apibuildtoolversion") + ".jar")
    return file.exists()
}

def hasSpigot() {
    def groupId = "org.spigotmc"
    def version = project.property("apiversion")
    return hasArtifact(groupId, "spigot-api", version) && hasArtifact(groupId, "spigot", version)
}

def hasArtifact(groupId, artifactId, version) {
    def localMavenRepo = new File(new File(ant.properties['user.home'] as String), ".m2/repository/")
    def file = new File(localMavenRepo, groupId.replace('.', '/') + "/" + artifactId + "/" + version + "/")
    return file.exists()
}
